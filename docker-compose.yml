# Docker Compose file version - specifies the format version and features available
#version: "3.9"

services:
  # Main application service definition - represents our Django REST API
  app:
    # Build instructions for creating the container image
    build:
      # The build context (location of Dockerfile) - current directory
      context: .
      args:
        - DEV=true  # Build argument to indicate development mode
    # Port mapping - connects host machine port to container port
    # Format is "host_port:container_port"
    ports:
      - "8000:8000"  # Maps localhost:8000 to container's port 8000
    # Volume mapping - links host directory to container directory
    # This creates a live connection so code changes are reflected immediately
    volumes:
      - ./app:/app  # Maps local ./app directory to /app in the container
    # Command to run when container starts
    # Overrides the default command in the Dockerfile
    # Runs Django development server on all interfaces
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8000"
    environment:
      - DB_HOST=db  # Database host (service name defined below)
      - DB_NAME=dev_db  # Database name
      - DB_USER=dev_user  # Database user
      - DB_PASSWORD=changeme  # Database password
    depends_on:
      - db  # Ensures the database service starts before this app service

  # Database service definition - represents our PostgreSQL database
  db:
    image: postgres:13-alpine  # Uses official PostgreSQL image, version 13 on Alpine Linux
    volumes:
      - dev-db-data:/var/lib/postgresql/data  # Persists database data on host
    environment:
      - POSTGRESDB=dev_db  # Database name
      - POSTGRES_USER=dev_user  # Database user
      - POSTGRES_PASSWORD=changeme  # Database password


volumes:
  dev-db-data:
